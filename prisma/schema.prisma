// Schéma Prisma pour l'Ambassade du Mali en Libye
// Gestion des utilisateurs, contenu, visas et communications

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle pour les administrateurs
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      AdminRole @default(EDITOR)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles   Article[]
  events     Event[]
  documents  Document[]
  visaApplications VisaApplication[]

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
}

// Modèle pour les catégories
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  nameAr      String?  // Nom en arabe
  description String?
  descriptionAr String? // Description en arabe
  color       String?  // Couleur hex pour l'affichage
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articles    Article[]
  events      Event[]

  @@map("categories")
}

// Modèle pour les articles
model Article {
  id          String   @id @default(cuid())
  title       String
  titleAr     String?  // Titre en arabe
  content     String
  contentAr   String?  // Contenu en arabe
  excerpt     String?
  excerptAr   String?
  slug        String   @unique
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  publishedAt DateTime?
  imageUrl    String?
  tags        String?  // JSON string pour stocker les tags
  categoryId  String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author Admin @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  gallery ArticleGallery[]

  @@map("articles")
}

// Modèle pour les événements
model Event {
  id          String   @id @default(cuid())
  title       String
  titleAr     String?
  description String
  descriptionAr String?
  location    String
  startDate   DateTime
  endDate     DateTime?
  isRecurring Boolean  @default(false)
  imageUrl    String?
  published   Boolean  @default(false)
  categoryId  String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author Admin @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  gallery EventGallery[]

  @@map("events")
}

// Modèle pour les documents
model Document {
  id          String   @id @default(cuid())
  title       String
  titleAr     String?
  description String?
  descriptionAr String?
  fileUrl     String
  fileName    String
  fileSize    Int
  mimeType    String
  category    DocumentCategory
  isPublic    Boolean  @default(true)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author Admin @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum DocumentCategory {
  VISA_FORMS
  LEGAL_DOCUMENTS
  NEWS
  ANNOUNCEMENTS
  CULTURAL
  ECONOMIC
  POLITICAL
}

// Modèle pour les demandes de visa
model VisaApplication {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  phone           String
  nationality     String
  passportNumber  String
  visaType        VisaType
  purpose         String
  entryDate       DateTime
  exitDate        DateTime
  status          VisaStatus @default(PENDING)
  documents       String?   // JSON string pour stocker les URLs des documents
  notes           String?
  processedBy     String?
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  processor Admin? @relation(fields: [processedBy], references: [id])

  @@map("visa_applications")
}

enum VisaType {
  TOURIST
  BUSINESS
  DIPLOMATIC
  STUDENT
  WORK
  TRANSIT
}

enum VisaStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CANCELLED
}

// Modèle pour les messages de contact
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  isRead    Boolean  @default(false)
  repliedAt DateTime?
  createdAt DateTime @default(now())

  @@map("contact_messages")
}

// Modèle pour les annonces
model Announcement {
  id          String   @id @default(cuid())
  title       String
  titleAr     String?
  content     String
  contentAr   String?
  priority    Priority @default(NORMAL)
  isActive    Boolean  @default(true)
  startDate   DateTime @default(now())
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("announcements")
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Modèle pour la galerie d'images des articles
model ArticleGallery {
  id        String   @id @default(cuid())
  articleId String
  imageUrl  String
  altText   String?  // Texte alternatif pour l'accessibilité
  caption   String?  // Légende de l'image
  captionAr String?  // Légende en arabe
  order     Int      @default(0) // Ordre d'affichage
  createdAt DateTime @default(now())

  // Relations
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_gallery")
}

// Modèle pour la galerie d'images des événements
model EventGallery {
  id        String   @id @default(cuid())
  eventId   String
  imageUrl  String
  altText   String?  // Texte alternatif pour l'accessibilité
  caption   String?  // Légende de l'image
  captionAr String?  // Légende en arabe
  order     Int      @default(0) // Ordre d'affichage
  createdAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_gallery")
}
