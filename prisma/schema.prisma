generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String
  name             String
  role             AdminRole         @default(EDITOR)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  articles         Article[]
  documents        Document[]
  events           Event[]
  visaApplications VisaApplication[]

  @@map("admins")
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  nameAr        String?
  description   String?
  descriptionAr String?
  color         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  articles      Article[]
  events        Event[]

  @@map("categories")
}

model Article {
  id          String           @id @default(cuid())
  title       String
  titleAr     String?
  content     String
  contentAr   String?
  excerpt     String?
  excerptAr   String?
  slug        String           @unique
  featured    Boolean          @default(false)
  published   Boolean          @default(false)
  publishedAt DateTime?
  imageUrl    String?
  tags        String?
  categoryId  String?
  authorId    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  gallery     ArticleGallery[]
  author      Admin            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category?        @relation(fields: [categoryId], references: [id])

  @@map("articles")
}

model Event {
  id            String         @id @default(cuid())
  title         String
  titleAr       String?
  description   String
  descriptionAr String?
  location      String
  startDate     DateTime
  endDate       DateTime?
  isRecurring   Boolean        @default(false)
  imageUrl      String?
  published     Boolean        @default(false)
  categoryId    String?
  authorId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  gallery       EventGallery[]
  author        Admin          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category      Category?      @relation(fields: [categoryId], references: [id])

  @@map("events")
}

model Document {
  id            String           @id @default(cuid())
  title         String
  titleAr       String?
  description   String?
  descriptionAr String?
  fileUrl       String
  fileName      String
  fileSize      Int
  mimeType      String
  category      DocumentCategory
  isPublic      Boolean          @default(true)
  authorId      String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  author        Admin            @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model VisaApplication {
  id             String     @id @default(cuid())
  firstName      String
  lastName       String
  email          String
  phone          String
  nationality    String
  passportNumber String
  visaType       VisaType
  purpose        String
  entryDate      DateTime
  exitDate       DateTime
  status         VisaStatus @default(PENDING)
  documents      String?
  notes          String?
  processedBy    String?
  processedAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  processor      Admin?     @relation(fields: [processedBy], references: [id])

  @@map("visa_applications")
}

model ContactMessage {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
  createdAt DateTime  @default(now())

  @@map("contact_messages")
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  titleAr   String?
  content   String
  contentAr String?
  priority  Priority  @default(NORMAL)
  isActive  Boolean   @default(true)
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("announcements")
}

model ArticleGallery {
  id        String    @id @default(cuid())
  articleId String
  mediaUrl  String
  altText   String?
  caption   String?
  captionAr String?
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  mediaType MediaType @default(IMAGE)
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_gallery")
}

model EventGallery {
  id        String    @id @default(cuid())
  eventId   String
  mediaUrl  String
  altText   String?
  caption   String?
  captionAr String?
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  mediaType MediaType @default(IMAGE)
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_gallery")
}

model GeneralGallery {
  id        String    @id @default(cuid())
  mediaUrl  String
  mediaType MediaType @default(IMAGE)
  altText   String?
  caption   String?
  captionAr String?
  fileName  String?
  fileSize  Int?
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("general_gallery")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
}

enum DocumentCategory {
  VISA_FORMS
  LEGAL_DOCUMENTS
  NEWS
  ANNOUNCEMENTS
  CULTURAL
  ECONOMIC
  POLITICAL
}

enum VisaType {
  TOURIST
  BUSINESS
  DIPLOMATIC
  STUDENT
  WORK
  TRANSIT
}

enum VisaStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MediaType {
  IMAGE
  VIDEO
}
